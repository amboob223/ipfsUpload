{"ast":null,"code":"var _jsxFileName = \"/Users/playabook/Desktop/feb/snatch/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [ipfsHash, setIpfsHash] = useState(null);\n  const connectMetamask = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const account = accounts[0];\n        setConnectedAddress(account);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fileChange = async event => {\n    const selectedFile = event.target.files[0];\n    try {\n      // Upload the file to NFT.storage\n      const fileFormData = new FormData();\n      fileFormData.append('file', selectedFile);\n      const fileResponse = await axios.post('https://api.nft.storage/upload', fileFormData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': 'Bearer YOUR_NFT_STORAGE_API_KEY'\n        }\n      });\n\n      // Get the IPFS hash for the file\n      const fileIpfsHash = fileResponse.data.value.cid;\n      setIpfsHash(fileIpfsHash);\n\n      // Prepare JSON metadata\n      const metadata = {\n        name: 'Snatch',\n        description: 'This is an NFT with file and metadata uploaded from my app.',\n        image: `https://ipfs.io/ipfs/${fileIpfsHash}`\n      };\n\n      // Convert metadata to JSON and upload to IPFS\n      const metadataFormData = new FormData();\n      metadataFormData.append('file', new Blob([JSON.stringify(metadata)], {\n        type: 'application/json'\n      }));\n      const metadataResponse = await axios.post('https://api.nft.storage/upload', metadataFormData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': 'Bearer YOUR_NFT_STORAGE_API_KEY'\n        }\n      });\n\n      // Get the IPFS hash for the metadata\n      const metadataIpfsHash = metadataResponse.data.value.cid;\n      console.log('Metadata IPFS Hash:', metadataIpfsHash);\n    } catch (error) {\n      console.error('Error uploading to NFT.storage:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectMetamask,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: connectedAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: fileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), ipfsHash && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `https://ipfs.io/ipfs/${ipfsHash}`,\n      alt: `IPFSimage: ${ipfsHash}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"KhTuBR5A5kVHjTdS46ni6nTU8hE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","connectedAddress","setConnectedAddress","ipfsHash","setIpfsHash","connectMetamask","window","ethereum","accounts","request","method","account","error","console","fileChange","event","selectedFile","target","files","fileFormData","FormData","append","fileResponse","post","headers","fileIpfsHash","data","value","cid","metadata","name","description","image","metadataFormData","Blob","JSON","stringify","type","metadataResponse","metadataIpfsHash","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onChange","src","alt","_c","$RefreshReg$"],"sources":["/Users/playabook/Desktop/feb/snatch/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [ipfsHash, setIpfsHash] = useState(null);\n\n  const connectMetamask = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const account = accounts[0];\n        setConnectedAddress(account);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fileChange = async (event) => {\n    const selectedFile = event.target.files[0];\n\n    try {\n      // Upload the file to NFT.storage\n      const fileFormData = new FormData();\n      fileFormData.append('file', selectedFile);\n\n      const fileResponse = await axios.post('https://api.nft.storage/upload', fileFormData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': 'Bearer YOUR_NFT_STORAGE_API_KEY',\n        },\n      });\n\n      // Get the IPFS hash for the file\n      const fileIpfsHash = fileResponse.data.value.cid;\n      setIpfsHash(fileIpfsHash);\n\n      // Prepare JSON metadata\n      const metadata = {\n        name: 'Snatch',\n        description: 'This is an NFT with file and metadata uploaded from my app.',\n        image: `https://ipfs.io/ipfs/${fileIpfsHash}`,\n      };\n\n      // Convert metadata to JSON and upload to IPFS\n      const metadataFormData = new FormData();\n      metadataFormData.append('file', new Blob([JSON.stringify(metadata)], { type: 'application/json' }));\n\n      const metadataResponse = await axios.post('https://api.nft.storage/upload', metadataFormData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': 'Bearer YOUR_NFT_STORAGE_API_KEY',\n        },\n      });\n\n      // Get the IPFS hash for the metadata\n      const metadataIpfsHash = metadataResponse.data.value.cid;\n      console.log('Metadata IPFS Hash:', metadataIpfsHash);\n\n    } catch (error) {\n      console.error('Error uploading to NFT.storage:', error);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={connectMetamask}>Connect Wallet</button>\n      <p>{connectedAddress}</p>\n\n      <input\n        type=\"file\"\n        onChange={fileChange}\n      />\n      {ipfsHash && <img src={`https://ipfs.io/ipfs/${ipfsHash}`} alt={`IPFSimage: ${ipfsHash}`} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}