{"ast":null,"code":"var _jsxFileName = \"/Users/playabook/Desktop/feb/snatch/src/App.js\",\n  _s = $RefreshSig$();\n/* eslint-disable-next-line */\nimport React, { useState } from 'react';\nimport { create } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [file, setFile] = useState(\"\");\n  const [ipfsHash, setIpfsHash] = useState(null);\n  const connectMetamask = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(window.ethereum);\n        const account = accounts[0];\n        setConnectedAddress(account);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fileChange = async event => {\n    const selectedFile = event.target.files[0];\n    try {\n      // Connect to IPFS node\n      const ipfsNode = create({\n        host: \"localhost\",\n        port: 5001,\n        protocol: \"http\"\n      });\n      setFile(selectedFile);\n\n      // Upload the file to IPFS and get the content hash\n      const result = await ipfsNode.add(selectedFile);\n      const hash = result.cid.toString();\n      setIpfsHash(hash);\n      const uri = URL.createObjectURL(selectedFile);\n      console.log(uri);\n    } catch (error) {\n      console.error(\"Error uploading to IPFS:\", error);\n\n      // Check if the error is due to CORS\n      if (error.message && error.message.includes(\"CORS\")) {\n        console.error(\"Ensure that your IPFS node has proper CORS configuration.\");\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectMetamask,\n      children: \" Connect Wallet \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: connectedAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: fileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: file.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"File URI: \", ipfsHash]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"OKyztCHFiHMl6HLzVWJc2jDjnV0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","create","jsxDEV","_jsxDEV","App","_s","connectedAddress","setConnectedAddress","file","setFile","ipfsHash","setIpfsHash","connectMetamask","window","ethereum","accounts","request","method","console","log","account","error","fileChange","event","selectedFile","target","files","ipfsNode","host","port","protocol","result","add","hash","cid","toString","uri","URL","createObjectURL","message","includes","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","name","_c","$RefreshReg$"],"sources":["/Users/playabook/Desktop/feb/snatch/src/App.js"],"sourcesContent":["/* eslint-disable-next-line */\nimport React, { useState } from 'react';\nimport { create } from 'ipfs-http-client';\n\nfunction App() {\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [file, setFile] = useState(\"\");\n  const [ipfsHash, setIpfsHash] = useState(null);\n\n  const connectMetamask = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: \"eth_requestAccounts\" });\n        console.log(window.ethereum);\n        const account = accounts[0];\n        setConnectedAddress(account);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const fileChange = async (event) => {\n  const selectedFile = event.target.files[0];\n\n  try {\n    // Connect to IPFS node\n    const ipfsNode = create({ host: \"localhost\", port: 5001, protocol: \"http\" });\n\n    setFile(selectedFile);\n\n    // Upload the file to IPFS and get the content hash\n    const result = await ipfsNode.add(selectedFile);\n    const hash = result.cid.toString();\n\n    setIpfsHash(hash);\n\n    const uri = URL.createObjectURL(selectedFile);\n    console.log(uri);\n\n  } catch (error) {\n    console.error(\"Error uploading to IPFS:\", error);\n\n    // Check if the error is due to CORS\n    if (error.message && error.message.includes(\"CORS\")) {\n      console.error(\"Ensure that your IPFS node has proper CORS configuration.\");\n    }\n  }\n}\n\n  return (\n    <div>\n      <button onClick={connectMetamask}> Connect Wallet </button>\n      <p>{connectedAddress}</p>\n\n      <input\n        type=\"file\"\n        onChange={fileChange}\n      />\n      <p>{file.name}</p>\n\n      <p>File URI: {ipfsHash}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}