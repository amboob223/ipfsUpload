{"ast":null,"code":"var _jsxFileName = \"/Users/playabook/Desktop/feb/snatch/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n\n// import { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const imgdir = FileSystem.documentDirectory + 'images/';\n\n  // const ensureDirExist = async () => {\n  //   const dirInfo = await FileSystem.getInfoAsync(imgdir);\n  //   if (!dirInfo.exists) {\n  //     await FileSystem.makeDirectoryAsync(imgdir, { intermediates: true });\n  //   }\n  // };\n  // const [img, setImg] = useState(null);\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [file, setFile] = useState(\"\");\n  // useEffect(() => {\n  //   ensureDirExist();\n  // }, []);\n\n  const connectMetamask = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(window.ethereum);\n        const account = accounts[0];\n        setConnectedAddress(account);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectMetamask,\n      children: \" Connect Wallet \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: connectedAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: fileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ViG9cRkPVgqgNfGPJHvfzG1s3wU=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","connectedAddress","setConnectedAddress","file","setFile","connectMetamask","window","ethereum","accounts","request","method","console","log","account","error","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","fileChange","_c","$RefreshReg$"],"sources":["/Users/playabook/Desktop/feb/snatch/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\n\n\n// import { ethers } from 'ethers';\n\n\nfunction App() {\n\n// const imgdir = FileSystem.documentDirectory + 'images/';\n\n// const ensureDirExist = async () => {\n//   const dirInfo = await FileSystem.getInfoAsync(imgdir);\n//   if (!dirInfo.exists) {\n//     await FileSystem.makeDirectoryAsync(imgdir, { intermediates: true });\n//   }\n// };\n  // const [img, setImg] = useState(null);\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [file,setFile] = useState(\"\")\n  // useEffect(() => {\n  //   ensureDirExist();\n  // }, []);\n\n const connectMetamask = async() =>{\n  \n  try {\n    if(window.ethereum){\n    const accounts = await window.ethereum.request({method:\"eth_requestAccounts\"});\n    console.log(window.ethereum)\n    const account = accounts[0]\n    setConnectedAddress(account)\n\n  }\n  } catch (error) {\n    console.error(error)\n    \n  }\n }\n\n  return (\n    <div>\n      <button onClick={connectMetamask}> Connect Wallet </button>\n      {/* <View style={styles.container}> */}\n      \n      <p>{connectedAddress}</p>\n\n      {/* <StatusBar style=\"auto\" />\n    </View> */}\n      <input\n          type=\"file\"\n          onChange={fileChange}\n          />\n          {/* *after the file is uploaded I want to update the file state with the url or uri of the photo uploaded and later I want to send that url to ipfs \n    </div> */}\n    </div>\n    \n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;;AAIvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEf;;EAEA;EACA;EACA;EACA;EACA;EACA;EACE;EACA,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACO,IAAI,EAACC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACnC;EACA;EACA;;EAED,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAU;IAEjC,IAAI;MACF,IAAGC,MAAM,CAACC,QAAQ,EAAC;QACnB,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAACC,MAAM,EAAC;QAAqB,CAAC,CAAC;QAC9EC,OAAO,CAACC,GAAG,CAACN,MAAM,CAACC,QAAQ,CAAC;QAC5B,MAAMM,OAAO,GAAGL,QAAQ,CAAC,CAAC,CAAC;QAC3BN,mBAAmB,CAACW,OAAO,CAAC;MAE9B;IACA,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;IAEtB;EACD,CAAC;EAEA,oBACEhB,OAAA;IAAAiB,QAAA,gBACEjB,OAAA;MAAQkB,OAAO,EAAEX,eAAgB;MAAAU,QAAA,EAAC;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAG3DtB,OAAA;MAAAiB,QAAA,EAAId;IAAgB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAIzBtB,OAAA;MACIuB,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAEC;IAAW;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGH,CAAC;AAGV;AAACpB,EAAA,CAnDQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAmDX;AAED,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}