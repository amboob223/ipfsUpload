{"ast":null,"code":"var _jsxFileName = \"/Users/playabook/Desktop/feb/snatch/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ipfs from 'ipfs-http-client';\n\n// import { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [file, setFile] = useState(\"\");\n  const [ipfsHash, setIpfsHash] = useState(null);\n\n  // useEffect(() => {\n  //   ensureDirExist();\n  // }, []);\n\n  const connectMetamask = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        console.log(window.ethereum);\n        const account = accounts[0];\n        setConnectedAddress(account);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fileChange = async event => {\n    const selectedFile = event.target.files[0]; // that files here is a attribute withj the input tages that shows an array of files and we pulling uuo tghg first one \n\n    try {\n      const ipfsNode = ipfs({\n        host: \"localhost\",\n        port: 5001,\n        protocol: \"http\"\n      });\n      setFile(selectedFile);\n      const result = await ipfsNode.add(file);\n      const hash = result.cid.toString();\n      setIpfsHash(hash);\n      const uri = URL.createObjectURL(selectedFile); // what does this do *update\n      setIpfsHash(uri);\n      console.log(uri);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectMetamask,\n      children: \" Connect Wallet \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: connectedAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: fileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: file.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"file URI: \", ipfsHash]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"AN97mqn02W2g1fSioZYo6wpBvqY=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ipfs","jsxDEV","_jsxDEV","App","_s","connectedAddress","setConnectedAddress","file","setFile","ipfsHash","setIpfsHash","connectMetamask","window","ethereum","accounts","request","method","console","log","account","error","fileChange","event","selectedFile","target","files","ipfsNode","host","port","protocol","result","add","hash","cid","toString","uri","URL","createObjectURL","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","name","_c","$RefreshReg$"],"sources":["/Users/playabook/Desktop/feb/snatch/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport ipfs from 'ipfs-http-client';\n\n\n// import { ethers } from 'ethers';\n\n\nfunction App() {\n\n\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [file,setFile] = useState(\"\")\n  const [ipfsHash, setIpfsHash] = useState(null);\n \n  // useEffect(() => {\n  //   ensureDirExist();\n  // }, []);\n\n const connectMetamask = async() =>{\n  \n  try {\n    if(window.ethereum){\n    const accounts = await window.ethereum.request({method:\"eth_requestAccounts\"});\n    console.log(window.ethereum)\n    const account = accounts[0]\n    setConnectedAddress(account)\n\n  }\n  } catch (error) {\n    console.error(error)\n    \n  }\n }\n\n const fileChange = async(event) =>{\n const selectedFile = event.target.files[0] // that files here is a attribute withj the input tages that shows an array of files and we pulling uuo tghg first one \n      \n  try {\n      const ipfsNode = ipfs({host:\"localhost\",port:5001,protocol:\"http\"});\n              setFile(selectedFile)\n      const result = await ipfsNode.add(file)\n      const hash = result.cid.toString();\n\n      setIpfsHash(hash)\n\n    \n\n      const uri = URL.createObjectURL(selectedFile) // what does this do *update\n      setIpfsHash(uri)\n      console.log(uri)\n\n  } catch (error) {\n    console.error(error)\n  }\n }\n\n  return (\n    <div>\n      <button onClick={connectMetamask}> Connect Wallet </button>\n     \n      \n      <p>{connectedAddress}</p>\n\n   \n      <input\n          type=\"file\"\n          onChange={fileChange}\n          />\n      <p>{file.name}</p>\n          \n\n      <p>file URI: {ipfsHash}</p>\n    </div>\n    \n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,kBAAkB;;AAGnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAGb,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACQ,IAAI,EAACC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACnC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACA;EACA;;EAED,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAU;IAEjC,IAAI;MACF,IAAGC,MAAM,CAACC,QAAQ,EAAC;QACnB,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAACC,MAAM,EAAC;QAAqB,CAAC,CAAC;QAC9EC,OAAO,CAACC,GAAG,CAACN,MAAM,CAACC,QAAQ,CAAC;QAC5B,MAAMM,OAAO,GAAGL,QAAQ,CAAC,CAAC,CAAC;QAC3BR,mBAAmB,CAACa,OAAO,CAAC;MAE9B;IACA,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;IAEtB;EACD,CAAC;EAED,MAAMC,UAAU,GAAG,MAAMC,KAAK,IAAI;IAClC,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAC;;IAE1C,IAAI;MACA,MAAMC,QAAQ,GAAG1B,IAAI,CAAC;QAAC2B,IAAI,EAAC,WAAW;QAACC,IAAI,EAAC,IAAI;QAACC,QAAQ,EAAC;MAAM,CAAC,CAAC;MAC3DrB,OAAO,CAACe,YAAY,CAAC;MAC7B,MAAMO,MAAM,GAAG,MAAMJ,QAAQ,CAACK,GAAG,CAACxB,IAAI,CAAC;MACvC,MAAMyB,IAAI,GAAGF,MAAM,CAACG,GAAG,CAACC,QAAQ,CAAC,CAAC;MAElCxB,WAAW,CAACsB,IAAI,CAAC;MAIjB,MAAMG,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACd,YAAY,CAAC,EAAC;MAC9Cb,WAAW,CAACyB,GAAG,CAAC;MAChBlB,OAAO,CAACC,GAAG,CAACiB,GAAG,CAAC;IAEpB,CAAC,CAAC,OAAOf,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;IACtB;EACD,CAAC;EAEA,oBACElB,OAAA;IAAAoC,QAAA,gBACEpC,OAAA;MAAQqC,OAAO,EAAE5B,eAAgB;MAAA2B,QAAA,EAAC;IAAgB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAG3DzC,OAAA;MAAAoC,QAAA,EAAIjC;IAAgB;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGzBzC,OAAA;MACI0C,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAExB;IAAW;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACNzC,OAAA;MAAAoC,QAAA,EAAI/B,IAAI,CAACuC;IAAI;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGlBzC,OAAA;MAAAoC,QAAA,GAAG,YAAU,EAAC7B,QAAQ;IAAA;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAGV;AAACvC,EAAA,CApEQD,GAAG;AAAA4C,EAAA,GAAH5C,GAAG;AAoEX;AAED,eAAeA,GAAG;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}