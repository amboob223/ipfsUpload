{"ast":null,"code":"var _jsxFileName = \"/Users/playabook/Desktop/feb/snatch/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [file, setFile] = useState(null);\n  const [ipfsHash, setIpfsHash] = useState(null);\n  const connectMetamask = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const account = accounts[0];\n        setConnectedAddress(account);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const fileChange = async event => {\n    const selectedFile = event.target.files[0];\n    try {\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n\n      // Upload the file to NFT.storage\n      const response = await axios.post('https://api.nft.storage/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': 'Bearer YOUR_NFT_STORAGE_API_KEY' // Replace with your NFT.storage API key\n        }\n      });\n\n      // Get the IPFS hash from the response\n      const ipfsHash = response.data.value.cid;\n      setIpfsHash(ipfsHash);\n    } catch (error) {\n      console.error('Error uploading to NFT.storage:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectMetamask,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: connectedAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: fileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"File IPFS Hash: \", ipfsHash]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/G+hiR9b6EGuE8PNAU19TrI2LL4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","connectedAddress","setConnectedAddress","file","setFile","ipfsHash","setIpfsHash","connectMetamask","window","ethereum","accounts","request","method","account","error","console","fileChange","event","selectedFile","target","files","formData","FormData","append","response","post","headers","data","value","cid","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["/Users/playabook/Desktop/feb/snatch/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [connectedAddress, setConnectedAddress] = useState(null);\n  const [file, setFile] = useState(null);\n  const [ipfsHash, setIpfsHash] = useState(null);\n\n  const connectMetamask = async () => {\n    try {\n      if (window.ethereum) {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const account = accounts[0];\n        setConnectedAddress(account);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const fileChange = async (event) => {\n    const selectedFile = event.target.files[0];\n\n    try {\n      const formData = new FormData();\n      formData.append('file', selectedFile);\n\n      // Upload the file to NFT.storage\n      const response = await axios.post('https://api.nft.storage/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          'Authorization': 'Bearer YOUR_NFT_STORAGE_API_KEY', // Replace with your NFT.storage API key\n        },\n      });\n\n      // Get the IPFS hash from the response\n      const ipfsHash = response.data.value.cid;\n      setIpfsHash(ipfsHash);\n\n    } catch (error) {\n      console.error('Error uploading to NFT.storage:', error);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={connectMetamask}>Connect Wallet</button>\n      <p>{connectedAddress}</p>\n\n      <input\n        type=\"file\"\n        onChange={fileChange}\n      />\n      <p>File IPFS Hash: {ipfsHash}</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9D,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACF,IAAIC,MAAM,CAACC,QAAQ,EAAE;QACnB,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QACjF,MAAMC,OAAO,GAAGH,QAAQ,CAAC,CAAC,CAAC;QAC3BR,mBAAmB,CAACW,OAAO,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB;EACF,CAAC;EAED,MAAME,UAAU,GAAG,MAAOC,KAAK,IAAK;IAClC,MAAMC,YAAY,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAE1C,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEL,YAAY,CAAC;;MAErC;MACA,MAAMM,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,gCAAgC,EAAEJ,QAAQ,EAAE;QAC5EK,OAAO,EAAE;UACP,cAAc,EAAE,qBAAqB;UACrC,eAAe,EAAE,iCAAiC,CAAE;QACtD;MACF,CAAC,CAAC;;MAEF;MACA,MAAMrB,QAAQ,GAAGmB,QAAQ,CAACG,IAAI,CAACC,KAAK,CAACC,GAAG;MACxCvB,WAAW,CAACD,QAAQ,CAAC;IAEvB,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,oBACEhB,OAAA;IAAAgC,QAAA,gBACEhC,OAAA;MAAQiC,OAAO,EAAExB,eAAgB;MAAAuB,QAAA,EAAC;IAAc;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzDrC,OAAA;MAAAgC,QAAA,EAAI7B;IAAgB;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEzBrC,OAAA;MACEsC,IAAI,EAAC,MAAM;MACXC,QAAQ,EAAErB;IAAW;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,eACFrC,OAAA;MAAAgC,QAAA,GAAG,kBAAgB,EAACzB,QAAQ;IAAA;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAACnC,EAAA,CArDQD,GAAG;AAAAuC,EAAA,GAAHvC,GAAG;AAuDZ,eAAeA,GAAG;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}